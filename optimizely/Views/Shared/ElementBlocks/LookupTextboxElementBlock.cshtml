@*
    ====================================
    Version: 5.0.0.0. Modified: 20210818
    ====================================
*@

@using EPiServer.Forms.Helpers.Internal
@using EPiServer.Forms.Implementation.Elements
@using repos.models.blocks.ElementBlock
@model LookupTextboxElementBlock

@{
    var formContainer = Model.FindOwnerForm();
    var formElement = Model.FormElement;
    var labelText = Model.Label;
    var propertyList = Model.ApiReturnMappings;
    var buttonText = Model.ButtonName;
    var cssClasses = Model.GetValidationCssClasses();
}

@using (Html.BeginElement(Model, new { @class = "FormTextbox" + cssClasses, data_f_type = "textbox" }))
{
    <label for="@formElement.Guid" class="Form__Element__Caption">@labelText</label>
    <input name="@formElement.ElementName" id="@formElement.Guid" type="text" class="FormTextbox__Input"
           aria-describedby="@Util.GetAriaDescribedByElementName(formElement.ElementName)" 
           @(!string.IsNullOrWhiteSpace(Model.PlaceHolder) ? Html.Raw($"placeholder=\"{Model.PlaceHolder}\""): "")
           value="@Model.GetDefaultValue()" @Html.Raw(Model.AttributesString) data-f-datainput
           aria-invalid="@Util.GetAriaInvalidByValidationCssClasses(cssClasses)" />
    <button type="button" class="btn btn-warning btn-sm" style="width:80px;" onclick="callRrnVerfication()"> @buttonText </button>

    @Html.ValidationMessageFor(Model)
    @Model.RenderDataList()

    <script type="text/javascript">

        function callRrnVerfication() 
        {
            //var name = document.getElementById("txtName").value;
            var request;
            if (window.XMLHttpRequest) {
                //New browsers.
                request = new XMLHttpRequest();
            }
            else if (window.ActiveXObject) {
                //Old IE Browsers.
                request = new ActiveXObject("Microsoft.XMLHTTP");
            }
           if (request != null) {
               $body.addClass('loading');
               var control = document.getElementById("@formElement.Guid");
               
                var url = "https://localhost:7066/api/ExternalService/" + document.getElementById("@formElement.Guid").value;
                console.dir(url);
                request.open("GET", url);
                request.setRequestHeader("Content-Type", "application/json");
                request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                request.setRequestHeader('Access-Control-Allow-Origin', '*');
                request.onreadystatechange = function (){
                    
                    if (request.readyState == 4) 
                    {
                        $body.removeClass('loading');

                        if (request.status == 200) {
                            SetValuesToForm(request.responseText);

                        } 
                        else if (request.status >= 400 && request.status <= 499) 
                        {
                            alert("Client Error: " + request.status + " \nResponse: " + request.responseText);
                        } 
                        else if (request.status >= 500 && request.status <= 599) 
                        {
                            alert("Client Error: " + request.status + " \nResponse: " + request.responseText);
                        } 
                        else 
                        { 
                            // other responses
                            /*
                                Informational responses (100–199)
                                Successful responses (200–299)
                                Redirection messages (300–399)
                                Client error responses (400–499)
                                Server error responses (500–599)
                            */
                        }
                    } else { 
                        // request not ready readystate != 4 DONE
                        /*
                            Value	State	Description
                            0	UNSENT	Client has been created. open() not called yet.
                            1	OPENED	open() has been called.
                            2	HEADERS_RECEIVED	send() has been called, and headers and status are available.
                            3	LOADING	Downloading; responseText holds partial data.
                            4	DONE	The operation is complete.
                        */
                    }
                };
                request.send(null);
            }
        }

        function SetValuesToForm(response) 
        {
            console.dir(response);
            var responseObjs = JSON.parse(response);

            $('#@Model.ReturnField').val(response);
            console.dir(responseObjs["SpecialComment"]);

            var specialComment = responseObjs["SpecialComment"];
            
            if (specialComment != null) {
                $('#@Model.ExportOfftakeField').val(responseObjs["SpecialComment"].split('^')[1]);
            }
            
            var supplyPhasesNo = responseObjs["supplyPhasesNo"];
            
            if (supplyPhasesNo != null) {
                $('#@Model.CoonectionPhaseField').val(supplyPhasesNo.split('^')[1]);
            }
            
            var supplyTransfomerKVA = responseObjs["supplyTransfomerKVA"];
            
            if (supplyTransfomerKVA != null) {
                $('#@Model.CoonectionTypeField').val(supplyTransfomerKVA.split('^')[1]);
            }
            
            var serviceOrderId = responseObjs["serviceOrderId"];
            
            if (serviceOrderId != null) {
                $('#@Model.EmergencySolarManagementField').val(serviceOrderId.split('^')[1]);
            }

            var nmi = responseObjs["nmi"];
            
            if (nmi != null) {
                $('#@Model.LocalNetwork').val(nmi.split('^')[1]);
            }

            var address = responseObjs["Address1"];

            if (address != null) { 
                $('#@Model.AddressField').append($('<option>', {
                    value: address,
                    text: address
                }));
            }
        }
    </script>

}

@section Scripts{

    
}
