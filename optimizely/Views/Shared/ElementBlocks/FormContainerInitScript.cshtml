@using EPiServer.ServiceLocation
@using EPiServer.Forms.Helpers.Internal
@using EPiServer.Forms.EditView.Internal
@using EPiServer.Forms.Implementation.Elements
@using System.Web
@model FormContainerBlock

@{
    var _formParagraphTextService = ServiceLocator.Current.GetInstance<EPiServer.Forms.Internal.FormParagraphTextService>();
    var _formValidationService = ServiceLocator.Current.GetInstance<EPiServer.Forms.Core.Validation.IValidationService>();
    var _formDataSubmissionService = ServiceLocator.Current.GetInstance<EPiServer.Forms.Core.Internal.DataSubmissionService>();
    var _formConfig = ServiceLocator.Current.GetInstance<EPiServer.Forms.Configuration.IEPiServerFormsImplementationConfig>();
    var _httpContextAccessor = ServiceLocator.Current.GetInstance<Microsoft.AspNetCore.Http.IHttpContextAccessor>();
}
<script type="text/javascript">
        // This view acts as a rendering template to render InitScript(and server-side Form's descriptor) in FormContainerBlock's client-side for Form[@Model.Form.FormGuid].
        // TECHNOTE: all serverside (paths, dynamic values) of EPiServerForms will be transfered to client side here in this section.
    (function initializeOnRenderingFormDescriptor() {
        // each workingFormInfo is store inside epi.EPiServer.Forms, lookup by its FormGuid
        var workingFormInfo=epi.EPiServer.Forms["@Model.Form.FormGuid"] ={
            Id: "@Model.Form.FormGuid" ,
            Name: "@Model.Form.Name" ,
            // whether this Form can be submitted which relates to the visitor's data (cookie, identity) and Form's settings (AllowAnonymous, AllowXXX)
            SubmittableStatus : @Html.Raw(FormsExtensions.ToJson(_formDataSubmissionService.GetSubmittableStatus(Model.Form, _httpContextAccessor.HttpContext))),
            ConfirmMessage : "@FormsExtensions.Replace(Model.ConfirmationMessage, "[\n\r]", " ")",
            ShowNavigationBar : @Model.ShowNavigationBar.ToString().ToLower(),
            ShowSummarizedData : @Model.ShowSummarizedData.ToString().ToLower(),
            // serialize the dependency configuration of this form to clientside
            DependenciesInfo : JSON.parse("@Html.Raw(HttpUtility.JavaScriptStringEncode(FormsExtensions.ToJson(Model.GetFormDependenciesInfo())))"),
            // keep all fieldName which are not satisfied the field dependency conditions
            DependencyInactiveElements: [],
            // Validation info, for executing validating on client side
            ValidationInfo : JSON.parse("@Html.Raw(HttpUtility.JavaScriptStringEncode(FormsExtensions.ToJson(_formValidationService.GetFormValidationInfo(Model))))"),
            // Steps information for driving multiple-step Forms.
            StepsInfo : {
                Steps: @Html.Raw(FormsExtensions.ToJson(Model.GetStepsDescriptor()))
            },
            FieldsExcludedInSubmissionSummary: @Html.Raw(FormsExtensions.ToJson(_formParagraphTextService.GetFieldsExcludedInSubmissionSummary(Model.Form))),
            ElementsInfo: JSON.parse("@Html.Raw(HttpUtility.JavaScriptStringEncode(FormsExtensions.ToJson(Model.GetElementsDescriptor())))"),
            DataSubmitController: "@_formConfig.CoreController"
        };
        /// TECHNOTE: Calculation at FormInfo level, and these values will be static input for later processing.
        workingFormInfo.StepsInfo.FormHasNoStep_VirtualStepCreated=@ViewBag.FormHasNoStep_VirtualStepCreated?.ToString().ToLower(); // this FLAG will be true, if Editor does not put any FormStep. Engine will create a virtual step, with empty GUID
        workingFormInfo.StepsInfo.FormHasNothing=@ViewBag.FormHasNothing?.ToString().ToLower(); // this FLAG will be true if FormContainer has no element at all
        workingFormInfo.StepsInfo.AllStepsAreNotLinked=@ViewBag.AllStepsAreNotLinked?.ToString().ToLower(); // this FLAG will be true, if all steps all have contentLink= ="" (emptyString)
    })();
</script>
